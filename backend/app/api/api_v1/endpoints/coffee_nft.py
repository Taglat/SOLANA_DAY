from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.db.session import get_db
from app.services.nft_service import NFTService
from app.models.nft import Achievement
import uuid

router = APIRouter()
nft_service = NFTService()


@router.post("/init-coffee-collection")
async def init_coffee_collection(db: Session = Depends(get_db)):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–æ—Ñ–µ–π–Ω–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–∑–ª—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–æ—Ñ–µ–π–Ω–∏
        puzzle_ids = nft_service.create_coffee_collection_puzzles(db)
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è NFT
        achievements_data = [
            {
                "name": "–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
                "description": "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –≤ –∫–æ—Ñ–µ–π–Ω–µ",
                "icon": "‚òï",
                "required_condition": {
                    "type": "transaction_count",
                    "value": 1
                },
                "reward_puzzle_id": puzzle_ids[0] if len(puzzle_ids) > 0 else None
            },
            {
                "name": "–õ—é–±–∏—Ç–µ–ª—å –∫–æ—Ñ–µ",
                "description": "–°–¥–µ–ª–∞–π—Ç–µ 3 –ø–æ–∫—É–ø–∫–∏ –≤ –∫–æ—Ñ–µ–π–Ω–µ",
                "icon": "‚òï‚òï",
                "required_condition": {
                    "type": "transaction_count", 
                    "value": 3
                },
                "reward_puzzle_id": puzzle_ids[1] if len(puzzle_ids) > 1 else None
            },
            {
                "name": "–ö–æ—Ñ–µ–π–Ω—ã–π –≥—É—Ä–º–∞–Ω",
                "description": "–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ $50 –≤ –∫–æ—Ñ–µ–π–Ω–µ",
                "icon": "‚òï‚òï‚òï",
                "required_condition": {
                    "type": "spent_amount",
                    "value": 50
                },
                "reward_puzzle_id": puzzle_ids[2] if len(puzzle_ids) > 2 else None
            },
            {
                "name": "–≠—Å–ø—Ä–µ—Å—Å–æ –º–∞—Å—Ç–µ—Ä",
                "description": "–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ $100 –≤ –∫–æ—Ñ–µ–π–Ω–µ",
                "icon": "‚òï‚òï‚òï‚òï",
                "required_condition": {
                    "type": "spent_amount",
                    "value": 100
                },
                "reward_puzzle_id": puzzle_ids[3] if len(puzzle_ids) > 3 else None
            },
            {
                "name": "–õ–∞—Ç—Ç–µ –∞—Ä—Ç–∏—Å—Ç",
                "description": "–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ $150 –≤ –∫–æ—Ñ–µ–π–Ω–µ",
                "icon": "üé®",
                "required_condition": {
                    "type": "spent_amount",
                    "value": 150
                },
                "reward_puzzle_id": puzzle_ids[4] if len(puzzle_ids) > 4 else None
            },
            {
                "name": "–ö–æ—Ñ–µ–π–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
                "description": "–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ $250 –≤ –∫–æ—Ñ–µ–π–Ω–µ",
                "icon": "üëë",
                "required_condition": {
                    "type": "spent_amount",
                    "value": 250
                },
                "reward_puzzle_id": puzzle_ids[5] if len(puzzle_ids) > 5 else None
            }
        ]
        
        created_achievements = []
        for achievement_data in achievements_data:
            achievement = Achievement(
                id=str(uuid.uuid4()),
                name=achievement_data["name"],
                description=achievement_data["description"],
                icon=achievement_data["icon"],
                required_condition=achievement_data["required_condition"],
                reward_puzzle_id=achievement_data["reward_puzzle_id"]
            )
            
            db.add(achievement)
            created_achievements.append(achievement)
        
        db.commit()
        
        return {
            "message": "NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–æ—Ñ–µ–π–Ω–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
            "puzzles_created": len(puzzle_ids),
            "achievements_created": len(created_achievements),
            "puzzle_ids": puzzle_ids
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {str(e)}"
        )


@router.get("/coffee-collection/{wallet_address}")
async def get_coffee_collection(
    wallet_address: str,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–æ—Ñ–µ–π–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–∑–ª—ã –∫–æ—Ñ–µ–π–Ω–∏
        from app.models.nft import NFTPuzzle, UserNFT
        
        coffee_puzzles = db.query(NFTPuzzle).filter(
            NFTPuzzle.puzzle_name.like('coffee_%') |
            NFTPuzzle.puzzle_name.like('espresso_%') |
            NFTPuzzle.puzzle_name.like('latte_%')
        ).all()
        
        # –ü–æ–ª—É—á–∞–µ–º NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_nfts = db.query(UserNFT).filter(
            UserNFT.user_wallet == wallet_address
        ).all()
        
        owned_puzzle_ids = [nft.puzzle_id for nft in user_nfts]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        owned_puzzles = []
        missing_puzzles = []
        
        for puzzle in coffee_puzzles:
            puzzle_data = {
                "id": puzzle.id,
                "name": puzzle.puzzle_name,
                "image_url": puzzle.image_url,
                "rarity": puzzle.rarity,
                "position_x": puzzle.position_x,
                "position_y": puzzle.position_y
            }
            
            if puzzle.id in owned_puzzle_ids:
                owned_puzzles.append(puzzle_data)
            else:
                missing_puzzles.append(puzzle_data)
        
        completion_percentage = (len(owned_puzzles) / len(coffee_puzzles)) * 100 if coffee_puzzles else 0
        
        return {
            "owned_puzzles": owned_puzzles,
            "missing_puzzles": missing_puzzles,
            "total_puzzles": len(coffee_puzzles),
            "owned_count": len(owned_puzzles),
            "missing_count": len(missing_puzzles),
            "completion_percentage": completion_percentage,
            "can_complete_collection": len(missing_puzzles) == 0
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {str(e)}"
        )
