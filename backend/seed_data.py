#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.db.session import SessionLocal
from app.models.user import User
from app.models.business import Business
from app.models.transaction import Transaction
from decimal import Decimal
import uuid
from datetime import datetime, timedelta
import random

def create_demo_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = [
            User(
                id=str(uuid.uuid4()),
                username="alice_crypto",
                email="alice@example.com",
                wallet_address="9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                token_account="ATA44DXMX4LZKE8YEVD2GBYAVOMSRIRARZF",
                is_active=True,
                created_at=datetime.now() - timedelta(days=30)
            ),
            User(
                id=str(uuid.uuid4()),
                username="bob_trader",
                email="bob@example.com", 
                wallet_address="7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                token_account="ATB55EYNX5MZKE9ZFWD3HCYBVPMTRIRARZF",
                is_active=True,
                created_at=datetime.now() - timedelta(days=25)
            ),
            User(
                id=str(uuid.uuid4()),
                username="charlie_coffee",
                email="charlie@example.com",
                wallet_address="5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1",
                token_account="ATC66FZOY6NZKE0AGXE4IDYBVQNTRIRARZF",
                is_active=True,
                created_at=datetime.now() - timedelta(days=20)
            )
        ]
        
        for user in users:
            db.add(user)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–±–∏–∑–Ω–µ—Å—ã
        businesses = [
            Business(
                id=str(uuid.uuid4()),
                owner_wallet="9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                name="Coffee Corner",
                category="Cafe",
                description="–õ—É—á—à–∏–π –∫–æ—Ñ–µ –≤ –≥–æ—Ä–æ–¥–µ —Å —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π",
                tokens_per_dollar=10,
                max_discount_percent=30,
                is_active=True,
                created_at=datetime.now() - timedelta(days=30)
            ),
            Business(
                id=str(uuid.uuid4()),
                owner_wallet="7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                name="Elite Barbershop",
                category="Barbershop",
                description="–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞ –∏ —É—Ö–æ–¥ –∑–∞ –±–æ—Ä–æ–¥–æ–π",
                tokens_per_dollar=15,
                max_discount_percent=50,
                is_active=True,
                created_at=datetime.now() - timedelta(days=25)
            ),
            Business(
                id=str(uuid.uuid4()),
                owner_wallet="5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1",
                name="FitLife Gym",
                category="Fitness",
                description="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–± —Å –Ω–æ–≤–µ–π—à–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º",
                tokens_per_dollar=5,
                max_discount_percent=20,
                is_active=True,
                created_at=datetime.now() - timedelta(days=20)
            )
        ]
        
        for business in businesses:
            db.add(business)
        
        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        created_users = db.query(User).all()
        created_businesses = db.query(Business).all()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = []
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è Coffee Corner
        coffee_business = created_businesses[0]
        for i in range(15):
            user = random.choice(created_users)
            amount = Decimal(str(round(random.uniform(3.0, 15.0), 2)))
            tokens = int(amount * coffee_business.tokens_per_dollar)
            
            transaction = Transaction(
                id=str(uuid.uuid4()),
                customer_wallet=user.wallet_address,
                business_id=coffee_business.id,
                transaction_type="EARN",
                amount_usd=amount,
                tokens_amount=tokens,
                solana_signature=f"mint_{random.randint(100000, 999999)}",
                created_at=datetime.now() - timedelta(days=random.randint(1, 30))
            )
            transactions.append(transaction)
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è Elite Barbershop
        barbershop_business = created_businesses[1]
        for i in range(12):
            user = random.choice(created_users)
            amount = Decimal(str(round(random.uniform(20.0, 80.0), 2)))
            tokens = int(amount * barbershop_business.tokens_per_dollar)
            
            transaction = Transaction(
                id=str(uuid.uuid4()),
                customer_wallet=user.wallet_address,
                business_id=barbershop_business.id,
                transaction_type="EARN",
                amount_usd=amount,
                tokens_amount=tokens,
                solana_signature=f"mint_{random.randint(100000, 999999)}",
                created_at=datetime.now() - timedelta(days=random.randint(1, 25))
            )
            transactions.append(transaction)
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è FitLife Gym
        gym_business = created_businesses[2]
        for i in range(8):
            user = random.choice(created_users)
            amount = Decimal(str(round(random.uniform(50.0, 150.0), 2)))
            tokens = int(amount * gym_business.tokens_per_dollar)
            
            transaction = Transaction(
                id=str(uuid.uuid4()),
                customer_wallet=user.wallet_address,
                business_id=gym_business.id,
                transaction_type="EARN",
                amount_usd=amount,
                tokens_amount=tokens,
                solana_signature=f"mint_{random.randint(100000, 999999)}",
                created_at=datetime.now() - timedelta(days=random.randint(1, 20))
            )
            transactions.append(transaction)
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–∫–∏–¥–æ–∫
        for i in range(5):
            user = random.choice(created_users)
            business = random.choice(created_businesses)
            tokens_used = random.randint(50, 200)
            discount_amount = Decimal(str(round(tokens_used / 10, 2)))
            
            transaction = Transaction(
                id=str(uuid.uuid4()),
                customer_wallet=user.wallet_address,
                business_id=business.id,
                transaction_type="REDEEM",
                amount_usd=discount_amount,
                tokens_amount=tokens_used,
                solana_signature=f"burn_{random.randint(100000, 999999)}",
                created_at=datetime.now() - timedelta(days=random.randint(1, 15))
            )
            transactions.append(transaction)
        
        for transaction in transactions:
            db.add(transaction)
        
        db.commit()
        
        print("‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(created_users)}")
        print(f"üè™ –ë–∏–∑–Ω–µ—Å—ã: {len(created_businesses)}")
        print(f"üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {len(transactions)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_demo_data()
