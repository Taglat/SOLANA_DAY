#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import json
import time
from datetime import datetime

API_BASE = "http://127.0.0.1:8001/api/v1"

def create_test_user(wallet_address, name):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}")
    print(f"   –ö–æ—à–µ–ª–µ–∫: {wallet_address}")
    
    response = requests.post(f"{API_BASE}/register", json={
        "wallet_address": wallet_address
    })
    
    if response.status_code == 200:
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        return True
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return False

def create_test_receipt(customer_wallet, amount, business_id="demo_business_123"):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–∫"""
    print(f"üßæ –°–æ–∑–¥–∞–µ–º —á–µ–∫ –Ω–∞ ${amount}")
    
    response = requests.post(f"{API_BASE}/receipts/generate", json={
        "customer_wallet": customer_wallet,
        "business_id": business_id,
        "amount_usd": amount,
        "transaction_id": f"test_{int(time.time())}"
    })
    
    if response.status_code == 200:
        receipt = response.json()
        print(f"   ‚úÖ –ß–µ–∫ —Å–æ–∑–¥–∞–Ω: {receipt['id']}")
        return receipt
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def scan_receipt(qr_data, scanner_wallet):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫"""
    print(f"üì± –°–∫–∞–Ω–∏—Ä—É–µ–º —á–µ–∫...")
    
    response = requests.post(f"{API_BASE}/receipts/scan", json={
        "qr_code_data": qr_data,
        "scanner_wallet": scanner_wallet
    })
    
    if response.status_code == 200:
        result = response.json()
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {result['tokens_earned']} —Ç–æ–∫–µ–Ω–æ–≤!")
        if result.get('nft_earned'):
            print(f"   üéâ –ü–æ–ª—É—á–µ–Ω NFT: {result['nft_earned']}")
        return result
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def get_user_stats(wallet_address):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {wallet_address[:8]}...")
    
    # –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
    balance_response = requests.get(f"{API_BASE}/user-balance/{wallet_address}")
    if balance_response.status_code == 200:
        balance_data = balance_response.json()
        print(f"   üí∞ –¢–æ–∫–µ–Ω–æ–≤: {balance_data['balance']}")
    
    # NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è
    collection_response = requests.get(f"{API_BASE}/coffee-nft/coffee-collection/{wallet_address}")
    if collection_response.status_code == 200:
        collection = collection_response.json()
        print(f"   üñºÔ∏è NFT: {collection['owned_count']}/{collection['total_puzzles']} ({collection['completion_percentage']:.1f}%)")
        if collection['owned_puzzles']:
            print(f"   üìã –°–æ–±—Ä–∞–Ω–æ: {', '.join([p['name'] for p in collection['owned_puzzles']])}")

def main():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Coffee Loyalty")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    test_users = [
        {
            "wallet": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
            "name": "–ê–ª–∏—Å–∞ (VIP –∫–ª–∏–µ–Ω—Ç)"
        },
        {
            "wallet": "7Xy9K2mN8pQ4rS6tU1vW3xY5zA7bC9dE2fG4hI6jK8lM",
            "name": "–ë–æ–± (–Ω–æ–≤–∏—á–æ–∫)"
        },
        {
            "wallet": "3FgH5iJ9kL2mN6oP8qR1sT4uV7wX0yZ3aB5cD8eF1gH4iJ",
            "name": "–ö–∞—Ä–æ–ª–∏–Ω–∞ (–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä)"
        },
        {
            "wallet": "1AbC3dE5fG7hI9jK2lM4nO6pQ8rS0tU3vW5xY7zA9bC1dE",
            "name": "–î–º–∏—Ç—Ä–∏–π (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)"
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for user in test_users:
        create_test_user(user["wallet"], user["name"])
        time.sleep(0.5)
    
    print("\n" + "=" * 50)
    print("üéØ –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
    print("=" * 50)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ê–ª–∏—Å–∞ - VIP –∫–ª–∏–µ–Ω—Ç (–º–Ω–æ–≥–æ –ø–æ–∫—É–ø–æ–∫)
    print("\nüëë –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ê–ª–∏—Å–∞ - VIP –∫–ª–∏–µ–Ω—Ç")
    alice_wallet = test_users[0]["wallet"]
    
    # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–æ–∫
    purchases = [15.50, 25.00, 45.00, 60.00]
    for amount in purchases:
        receipt = create_test_receipt(alice_wallet, amount)
        if receipt:
            scan_receipt(receipt["qr_code_data"], alice_wallet)
            time.sleep(0.5)
    
    get_user_stats(alice_wallet)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ë–æ–± - –Ω–æ–≤–∏—á–æ–∫ (–º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–∫—É–ø–∫–∞)
    print("\nüÜï –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ë–æ–± - –Ω–æ–≤–∏—á–æ–∫")
    bob_wallet = test_users[1]["wallet"]
    
    receipt = create_test_receipt(bob_wallet, 8.75)
    if receipt:
        scan_receipt(receipt["qr_code_data"], bob_wallet)
    
    get_user_stats(bob_wallet)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ö–∞—Ä–æ–ª–∏–Ω–∞ - –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä (—Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏)
    print("\nüé® –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ö–∞—Ä–æ–ª–∏–Ω–∞ - –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä")
    carol_wallet = test_users[2]["wallet"]
    
    purchases = [30.00, 35.00, 40.00]
    for amount in purchases:
        receipt = create_test_receipt(carol_wallet, amount)
        if receipt:
            scan_receipt(receipt["qr_code_data"], carol_wallet)
            time.sleep(0.5)
    
    get_user_stats(carol_wallet)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –î–º–∏—Ç—Ä–∏–π - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏)
    print("\n‚òï –°—Ü–µ–Ω–∞—Ä–∏–π 4: –î–º–∏—Ç—Ä–∏–π - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
    dmitry_wallet = test_users[3]["wallet"]
    
    purchases = [12.00, 18.50, 22.00, 28.00, 32.50]
    for amount in purchases:
        receipt = create_test_receipt(dmitry_wallet, amount)
        if receipt:
            scan_receipt(receipt["qr_code_data"], dmitry_wallet)
            time.sleep(0.5)
    
    get_user_stats(dmitry_wallet)
    
    print("\n" + "=" * 50)
    print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    for user in test_users:
        print(f"\nüë§ {user['name']}")
        get_user_stats(user["wallet"])
    
    print("\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!")
    print("\nüì± –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    print("   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ http://10.25.0.47:3000")
    print("   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ª—é–±–æ–π –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
    print("   ‚Ä¢ –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    main()
