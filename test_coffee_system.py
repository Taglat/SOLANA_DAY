#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ñ–µ–π–Ω–∏
"""

import requests
import json
import time
import sys

API_BASE = "http://127.0.0.1:8001/api/v1"

def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_BASE.replace('/api/v1', '')}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def init_coffee_collection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
        response = requests.post(f"{API_BASE}/coffee-nft/init-coffee-collection")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {result['puzzles_created']} –ø–∞–∑–ª–æ–≤")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_demo_business():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–±–∏–∑–Ω–µ—Å–∞"""
    try:
        print("üè™ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–±–∏–∑–Ω–µ—Å–∞...")
        # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –±–∏–∑–Ω–µ—Å
        business = {
            "id": "demo_business_123",
            "name": "Coffee Corner",
            "description": "–£—é—Ç–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è —Å –∞—Ä–æ–º–∞—Ç–Ω—ã–º –∫–æ—Ñ–µ",
            "category": "Cafe"
        }
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±–∏–∑–Ω–µ—Å: {business['name']} (ID: {business['id']})")
        return business
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def create_demo_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_data = {
            "wallet_address": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
        }
        
        response = requests.post(f"{API_BASE}/register", json=user_data)
        if response.status_code == 200:
            user = response.json()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['wallet']}")
            return user
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_purchase_and_receipt(business_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞"""
    try:
        print("üí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫
        receipt_data = {
            "customer_wallet": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
            "business_id": business_id,
            "amount_usd": 15.50,
            "transaction_id": "demo_tx_123"
        }
        
        response = requests.post(f"{API_BASE}/receipts/generate", json=receipt_data)
        if response.status_code == 200:
            receipt = response.json()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —á–µ–∫: ${receipt['amount_usd']}")
            print(f"   ID —á–µ–∫–∞: {receipt['id']}")
            return receipt
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_receipt_scanning():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞"""
    try:
        print("üßæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞
        qr_data = {
            "receipt_id": "test_receipt_123",
            "transaction_id": "test_tx_123",
            "business_id": "test_business_123",
            "customer_wallet": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
            "amount_usd": "15.50",
            "timestamp": int(time.time()),
            "type": "receipt_scan"
        }
        
        scan_data = {
            "qr_code_data": json.dumps(qr_data),
            "scanner_wallet": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
        }
        
        response = requests.post(f"{API_BASE}/receipts/scan", json=scan_data)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ß–µ–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω: {result['message']}")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result['tokens_earned']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_nft_collection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        print("üñºÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
        
        wallet = "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
        response = requests.get(f"{API_BASE}/coffee-nft/coffee-collection/{wallet}")
        if response.status_code == 200:
            collection = response.json()
            print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
            print(f"   –í—Å–µ–≥–æ –ø–∞–∑–ª–æ–≤: {collection['total_puzzles']}")
            print(f"   –°–æ–±—Ä–∞–Ω–æ: {collection['owned_count']}")
            print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {collection['missing_count']}")
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {collection['completion_percentage']:.1f}%")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ñ–µ–π–Ω–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not test_api_health():
        print("\n‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä:")
        print("   cd backend && python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000")
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    if not init_coffee_collection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–±–∏–∑–Ω–µ—Å
    business = create_demo_business()
    if not business:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–±–∏–∑–Ω–µ—Å")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = create_demo_user()
    if not user:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    transaction = test_purchase_and_receipt(business['id'])
    if not transaction:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º NFT –∫–æ–ª–ª–µ–∫—Ü–∏—é
    if not test_nft_collection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å NFT –∫–æ–ª–ª–µ–∫—Ü–∏—é")
        sys.exit(1)
    
    print("\n" + "=" * 50)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüì± –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å:")
    print("   ‚Ä¢ –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:3000")
    print("   ‚Ä¢ –ë–∏–∑–Ω–µ—Å –¥–∞—à–±–æ—Ä–¥: http://localhost:3001")
    print("   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–∏–Ω–æ–∫: http://localhost:3000/images/nft_pictures/view_images.html")
    print("   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")

if __name__ == "__main__":
    main()
