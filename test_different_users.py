#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""

import requests
import json
import time

API_BASE = "http://127.0.0.1:8001/api/v1"

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
TEST_USERS = {
    "alice": {
        "wallet": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
        "name": "–ê–ª–∏—Å–∞",
        "type": "VIP –∫–ª–∏–µ–Ω—Ç",
        "emoji": "üëë"
    },
    "bob": {
        "wallet": "7Xy9K2mN8pQ4rS6tU1vW3xY5zA7bC9dE2fG4hI6jK8lM",
        "name": "–ë–æ–±",
        "type": "–Ω–æ–≤–∏—á–æ–∫",
        "emoji": "üÜï"
    },
    "carol": {
        "wallet": "3FgH5iJ9kL2mN6oP8qR1sT4uV7wX0yZ3aB5cD8eF1gH4iJ",
        "name": "–ö–∞—Ä–æ–ª–∏–Ω–∞",
        "type": "–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
        "emoji": "üé®"
    },
    "dmitry": {
        "wallet": "1AbC3dE5fG7hI9jK2lM4nO6pQ8rS0tU3vW5xY7zA9bC1dE",
        "name": "–î–º–∏—Ç—Ä–∏–π",
        "type": "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç",
        "emoji": "‚òï"
    }
}

def test_user_login(user_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = TEST_USERS[user_key]
    print(f"\n{user['emoji']} –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥: {user['name']} ({user['type']})")
    print(f"   –ö–æ—à–µ–ª–µ–∫: {user['wallet'][:12]}...{user['wallet'][-8:]}")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å (—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    try:
        balance_response = requests.get(f"{API_BASE}/user-balance/{user['wallet']}")
        if balance_response.status_code == 200:
            balance_data = balance_response.json()
            print(f"   üí∞ –¢–æ–∫–µ–Ω–æ–≤: {balance_data['balance']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º NFT –∫–æ–ª–ª–µ–∫—Ü–∏—é
    try:
        collection_response = requests.get(f"{API_BASE}/coffee-nft/coffee-collection/{user['wallet']}")
        if collection_response.status_code == 200:
            collection = collection_response.json()
            print(f"   üñºÔ∏è NFT: {collection['owned_count']}/{collection['total_puzzles']} ({collection['completion_percentage']:.1f}%)")
            
            if collection['owned_puzzles']:
                nft_names = [p['name'] for p in collection['owned_puzzles']]
                print(f"   üìã –°–æ–±—Ä–∞–Ω–æ: {', '.join(nft_names)}")
            else:
                print(f"   üìã –°–æ–±—Ä–∞–Ω–æ: –Ω–µ—Ç NFT")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def test_purchase_flow(user_key, amount):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏"""
    user = TEST_USERS[user_key]
    print(f"\nüõí {user['name']} –¥–µ–ª–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –Ω–∞ ${amount}")
    
    # –°–æ–∑–¥–∞–µ–º —á–µ–∫
    try:
        receipt_response = requests.post(f"{API_BASE}/receipts/generate", json={
            "customer_wallet": user['wallet'],
            "business_id": "demo_business_123",
            "amount_usd": amount,
            "transaction_id": f"test_{user_key}_{int(time.time())}"
        })
        
        if receipt_response.status_code == 200:
            receipt = receipt_response.json()
            print(f"   ‚úÖ –ß–µ–∫ —Å–æ–∑–¥–∞–Ω: {receipt['id'][:8]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {receipt_response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —á–µ–∫
    try:
        scan_response = requests.post(f"{API_BASE}/receipts/scan", json={
            "qr_code_data": receipt['qr_code_data'],
            "scanner_wallet": user['wallet']
        })
        
        if scan_response.status_code == 200:
            result = scan_response.json()
            print(f"   üéâ –ü–æ–ª—É—á–µ–Ω–æ {result['tokens_earned']} —Ç–æ–∫–µ–Ω–æ–≤!")
            if result.get('nft_earned'):
                print(f"   üñºÔ∏è –ü–æ–ª—É—á–µ–Ω NFT: {result['nft_earned']}")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scan_response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("-" * 40)
    
    for user_key in TEST_USERS:
        test_user_login(user_key)
        time.sleep(0.5)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏
    print("\nüõí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫")
    print("-" * 40)
    
    # –ê–ª–∏—Å–∞ - –±–æ–ª—å—à–∞—è –ø–æ–∫—É–ø–∫–∞
    test_purchase_flow("alice", 75.00)
    time.sleep(0.5)
    
    # –ë–æ–± - –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–∫—É–ø–∫–∞
    test_purchase_flow("bob", 12.50)
    time.sleep(0.5)
    
    # –ö–∞—Ä–æ–ª–∏–Ω–∞ - —Å—Ä–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞
    test_purchase_flow("carol", 35.00)
    time.sleep(0.5)
    
    # –î–º–∏—Ç—Ä–∏–π - —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
    test_purchase_flow("dmitry", 20.00)
    time.sleep(0.5)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("-" * 40)
    
    for user_key in TEST_USERS:
        test_user_login(user_key)
        time.sleep(0.5)
    
    print("\n" + "=" * 60)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüì± –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://10.25.0.47:3000")
    print("   2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:")
    for user_key, user in TEST_USERS.items():
        print(f"      ‚Ä¢ {user['emoji']} {user['name']} ({user['type']})")
        print(f"        –ö–æ—à–µ–ª–µ–∫: {user['wallet']}")
    print("   3. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    main()
